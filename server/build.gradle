buildscript {
    ext {
        kotlinVersion = '1.3.21'
        springBootVersion = '2.1.2.RELEASE'
        detektVersion = '1.0.0.RC6-4'
        swaggerVersion = '2.9.2'
        liquibaseVersion = '3.6.2'
        postgresqlDriverVersion = '42.2.2'
        assertJVersion = '3.10.0'
        romeTools = '1.10.0'
        orikaCore = '1.5.2'
        jacksonKotlin = '2.9.+'
        mockitoKotlinVersion = '1.6.0'
        mockitoVersion = '2.23.0'
        mockkVersion = '1.9.+'
        jsoupVersion = '1.11.3'
        springMockkVersion = '1.1.0'

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-4"
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-jpa"
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'



group = 'com.discover'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    jcenter()
}




detekt {
    version = "${detektVersion}"
    defaultProfile {
        input = file("src/main/kotlin")
        filters = ".*/resources/.*,.*/build/.*"
        config = file("detekt.yml")
    }
}


test {
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"
    }
}

dependencies {
    compile('org.springframework.session:spring-session-jdbc')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile group: 'io.springfox', name: 'springfox-swagger2', version: "${swaggerVersion}"
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: "${swaggerVersion}"
    compile group: 'org.liquibase', name: 'liquibase-core', version: "${liquibaseVersion}"
    compile group: 'org.postgresql', name: 'postgresql', version: "${postgresqlDriverVersion}"
    compile group: 'com.rometools', name: 'rome', version: "${romeTools}"
    compile group: 'ma.glasnost.orika', name: 'orika-core', version: "${orikaCore}"
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: "${jacksonKotlin}"
    compile group: 'org.jsoup', name: 'jsoup', version: "${jsoupVersion}"


    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('com.h2database:h2')
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude module: 'junit'
    }
    testCompile("org.assertj:assertj-core:${assertJVersion}")
    testCompile('org.springframework.security:spring-security-test')
    testCompile group: 'com.nhaarman', name: 'mockito-kotlin', version: "${mockitoKotlinVersion}"
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation("com.ninja-squad:springmockk:1.1.0")
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testImplementation("io.mockk:mockk:${mockkVersion}")
}