buildscript {
	ext {
		kotlinVersion = '1.2.50'
		springBootVersion = '2.0.3.RELEASE'
		detektVersion = '1.0.0.RC6-4'
		swaggerVersion = '2.8.0'
		liquibaseVersion = '3.6.1'
		postgresqlDriverVersion = '42.2.2'
		jooqVersion = '3.11.3'
		jooqCodeGenVersion = '3.0.0'
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath "org.postgresql:postgresql:${postgresqlDriverVersion}"
		classpath "nu.studer:gradle-jooq-plugin:${jooqCodeGenVersion}"

	}
}

plugins {
	id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-4"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'

group = 'com.discover'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	jcenter()
}




detekt {
	version = "${detektVersion}"
	defaultProfile {
		input = file("src/main/kotlin")
		filters = ".*/resources/.*,.*/build/.*"
		config = file("detekt.yml")
	}
}


test {
	useJUnitPlatform()
}

task preBuild << {
	println("jooq generation")
	detektCheck
}

dependencies {
	compile('org.springframework.session:spring-session-jdbc')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	compile group: 'io.springfox', name: 'springfox-swagger2', version: "${swaggerVersion}"
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: "${swaggerVersion}"
	compile group: 'org.liquibase', name: 'liquibase-core', version: "${liquibaseVersion}"
	compile group: 'org.postgresql', name: 'postgresql', version: "${postgresqlDriverVersion}"
	compile "org.jooq:jooq:$jooqVersion"
	jooqRuntime "org.postgresql:postgresql:${postgresqlDriverVersion}"
	compile('org.springframework.boot:spring-boot-starter-jooq')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
	}
	testCompile('org.springframework.security:spring-security-test')
	testImplementation('org.junit.jupiter:junit-jupiter-api')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}

jooq {

	version = "${jooqVersion}"
	app(sourceSets.main) {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = 'jdbc:postgresql://localhost:5432/discover'
			user = 'discover'
			password = 'discover@123'
			schema = 'public'
		}
		generator {
			name = 'org.jooq.codegen.DefaultGenerator'
			strategy {
				name = 'org.jooq.codegen.DefaultGeneratorStrategy'
			}
			database {
				name = 'org.jooq.meta.postgres.PostgresDatabase'
				inputSchema = 'public'
			}
			generate {
				relations = true
				deprecated = false
				records = true
				daos = false
				immutablePojos = true
				fluentSetters = true
				javaTimeTypes = false // java8 time api

				// requires jpa
				jpaAnnotations = false
				validationAnnotations = false
				springAnnotations = false
			}
			target {
				packageName = 'com.example.db'
				directory = 'src/main/java/generated'
			}
		}
	}
}

tasks.generateAppJooqSchemaSource.with {
	def out = new ByteArrayOutputStream()
	javaExecSpec = { JavaExecSpec s ->
		s.standardOutput = out
		s.errorOutput = out
		s.ignoreExitValue = true
		s.jvmArgs '-Xmx512M'
	}
	execResultHandler = { ExecResult r ->
		if (r.exitValue != 0) {
			throw new RuntimeException('jOOQ source code generation failed:\n\n' + out.toString())
		}
	}
}

build.dependsOn preBuild
